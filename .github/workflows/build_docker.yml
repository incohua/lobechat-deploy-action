name: Build_Docker

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Upstream lobehub/lobe-chat release tag to build'
        required: true
        default: 'latest'
  workflow_call:
    inputs:
      release_tag:
        description: 'Upstream release tag from monitor workflow'
        required: true
        type: string

env:
  REGISTRY_IMAGE: ${{ secrets.DOCKER_REGISTRY_USER }}/lobe-chat-clerk
  UPSTREAM_REPO_OWNER: "lobehub"
  UPSTREAM_REPO_NAME: "lobe-chat"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event.inputs.release_tag || github.sha }}
  cancel-in-progress: true

jobs:
  build:
    strategy:
      fail-fast: false # 允许某个平台失败后其他平台继续执行
      matrix:
        include:
          - platform: linux/amd64
            os: ubuntu-latest
          - platform: linux/arm64
            os: ubuntu-latest # 使用 QEMU 在标准 runner 上构建 ARM
    runs-on: ${{ matrix.os }}
    name: Build ${{ matrix.platform }} Image
    permissions:
      contents: read
      packages: write

    steps:
      - name: Prepare
        id: prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Checkout Workflow Repository
        uses: actions/checkout@v4
        with:
          path: workflow-repo

      - name: Validate Release Tag Input
        id: vars
        run: |
          TAG="${{ inputs.release_tag }}"
          if [ -z "$TAG" ]; then
            echo "Error: Release tag input is empty."
            exit 1
          fi
          echo "Building for upstream tag: $TAG"
          echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "release_tag=$TAG" >> $GITHUB_OUTPUT

      - name: Set up QEMU
        if: matrix.platform != 'linux/amd64'
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Prepare Build Context
        id: prepare_context
        run: |
          PLATFORM_NAME="${{ matrix.platform }}"
          SAFE_PLATFORM_NAME="${PLATFORM_NAME//\//-}"
          BUILD_CONTEXT_DIR="build-context-${SAFE_PLATFORM_NAME}"
          RELEASE_TAG="${{ steps.vars.outputs.release_tag }}"
          SOURCE_ARCHIVE="lobe-chat-source-$RELEASE_TAG.tar.gz"
          
          WORKSPACE_DIR="${GITHUB_WORKSPACE}"
          CUSTOM_DIR="${WORKSPACE_DIR}/workflow-repo/custom"
          
          echo "Creating build context directory: $BUILD_CONTEXT_DIR"
          mkdir -p "$BUILD_CONTEXT_DIR"
          cd "$BUILD_CONTEXT_DIR"
          
          echo "Downloading upstream source for tag v$RELEASE_TAG..."
          curl -sL "https://github.com/${{ env.UPSTREAM_REPO_OWNER }}/${{ env.UPSTREAM_REPO_NAME }}/archive/refs/tags/v$RELEASE_TAG.tar.gz" -o "$SOURCE_ARCHIVE"
          
          echo "Extracting source code..."
          tar -xzf "$SOURCE_ARCHIVE" --strip-components=1
          rm "$SOURCE_ARCHIVE"
          
          echo "Applying custom modifications..."
          if [ -d "${CUSTOM_DIR}" ]; then
            rsync -av "${CUSTOM_DIR}/" ./ --exclude '.gitkeep'
            echo "Custom files copied successfully"
          else
            echo "Warning: Custom directory not found at ${CUSTOM_DIR}"
            ls -la "${WORKSPACE_DIR}"
            ls -la "${WORKSPACE_DIR}/workflow-repo"
          fi
          
          echo "context_path=$BUILD_CONTEXT_DIR" >> $GITHUB_OUTPUT

      - name: Docker meta tags
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: |
            type=raw,value=${{ steps.vars.outputs.release_tag }}
            type=raw,value=${{ steps.vars.outputs.release_tag }}-manual,enable=${{ github.event_name == 'workflow_dispatch' }}

      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_REGISTRY_USER }}
          password: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}
          registry: docker.io

      - name: Build and push Docker image by digest
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ${{ steps.prepare_context.outputs.context_path }}
          file: ${{ steps.prepare_context.outputs.context_path }}/Dockerfile.database
          platforms: ${{ matrix.platform }}
          push: true
          # 关键修改：必须使用 push-by-digest=true
          outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            SHA=${{ steps.vars.outputs.sha_short }}
            UPSTREAM_VERSION=${{ steps.vars.outputs.release_tag }}
            NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
            CLERK_SECRET_KEY=${{ secrets.CLERK_SECRET_KEY }}
            CLERK_WEBHOOK_SECRET=${{ secrets.CLERK_WEBHOOK_SECRET }}

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"
          echo "${{ matrix.platform }} => ${digest}" >> /tmp/digests/mapping.txt
          echo "Saved digest for ${{ matrix.platform }}: ${digest}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          retention-days: 1
          if-no-files-found: error

  # 新增 merge 作业，专门处理多架构镜像合并
  merge:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          pattern: digests-*
          path: /tmp/digests
          merge-multiple: true

      - name: Display digest mapping
        run: |
          cat /tmp/digests/mapping.txt || echo "Mapping file not found"
          ls -la /tmp/digests

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta tags for manifest
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: |
            type=raw,value=${{ inputs.release_tag }}
            type=raw,value=latest,enable=${{ inputs.release_tag != 'latest' }}
            type=raw,value=${{ inputs.release_tag }}-manual,enable=${{ github.event_name == 'workflow_dispatch' }}

      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_REGISTRY_USER }}
          password: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}
          registry: docker.io

      - name: Create and push manifest
        working-directory: /tmp/digests
        run: |
          # 删除非 digest 文件
          find . -type f -name "mapping.txt" -delete
          
          # 创建 manifest list 并推送
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ inputs.release_tag }}