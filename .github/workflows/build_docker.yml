name: Build and Publish Docker Image

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: '构建的版本标签'
        required: true
        default: 'latest'
  repository_dispatch:
    types: [new-upstream-release]
  release:
    types: [published]
  pull_request:
    types: [synchronize, labeled, unlabeled]

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

env:
  REGISTRY_IMAGE: ${{ secrets.DOCKER_REGISTRY_USER }}/lobe-chat-clerk
  PR_TAG_PREFIX: pr-
  UPSTREAM_REPO: lobehub/lobe-chat  

jobs:
  prepare:
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'pull_request' &&
       contains(github.event.pull_request.labels.*.name, 'Build Docker')) ||
      github.event_name != 'pull_request'
    outputs:
      release_tag: ${{ steps.set_vars.outputs.release_tag }}
      build_context: ${{ steps.set_vars.outputs.build_context }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set variables
        id: set_vars
        run: |
          # 根据触发事件类型确定版本标签
          if [ "${{ github.event_name }}" == "repository_dispatch" ]; then
            # 从上游监控触发
            RELEASE_TAG="${{ github.event.client_payload.release_tag }}"
            BUILD_CONTEXT="upstream"
          elif [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            # 手动触发
            RELEASE_TAG="${{ github.event.inputs.release_tag }}"
            BUILD_CONTEXT="upstream"
          elif [ "${{ github.event_name }}" == "release" ]; then
            # 从release触发
            RELEASE_TAG="${{ github.ref_name }}"
            BUILD_CONTEXT="local"
          elif [ "${{ github.event_name }}" == "pull_request" ]; then
            # 从PR触发
            RELEASE_TAG="pr-${{ github.event.pull_request.number }}"
            BUILD_CONTEXT="local"
          else
            RELEASE_TAG="latest"
            BUILD_CONTEXT="local"
          fi
          
          echo "release_tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
          echo "build_context=$BUILD_CONTEXT" >> $GITHUB_OUTPUT
          echo "使用版本标签: $RELEASE_TAG"
          echo "构建上下文: $BUILD_CONTEXT"

  build:
    needs: prepare
    strategy:
      matrix:
        include:
          - platform: linux/amd64
            os: ubuntu-latest
          - platform: linux/arm64
            os: ubuntu-24.04-arm
    runs-on: ${{ matrix.os }}
    name: Build ${{ matrix.platform }} Image
    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Checkout base repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      # 如果需要上游构建上下文，则检出上游仓库
      - name: Checkout upstream repository
        if: needs.prepare.outputs.build_context == 'upstream'
        uses: actions/checkout@v4
        with:
          repository: ${{ env.UPSTREAM_REPO }}
          ref: ${{ needs.prepare.outputs.release_tag }}
          path: upstream-temp
      
      # 准备构建上下文
      - name: Prepare build context
        run: |
          mkdir -p build-context
          
          if [ "${{ needs.prepare.outputs.build_context }}" == "upstream" ]; then
            echo "基于上游仓库构建"
            # 复制上游仓库内容
            cp -r upstream-temp/* build-context/
            
            # 使用我们自己的Dockerfile和配置覆盖
            cp Dockerfile build-context/
            # 如有需要，覆盖其他特定文件
            if [ -d "custom-config" ]; then
              cp -r custom-config/* build-context/config/
            fi
          else
            echo "基于本地仓库构建"
            # 直接使用本地仓库的内容
            cp -r ./* build-context/
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 为 PR 生成特殊的 tag
      - name: Generate PR metadata
        if: github.event_name == 'pull_request'
        id: pr_meta
        run: |
          branch_name="${{ github.head_ref }}"
          sanitized_branch=$(echo "${branch_name}" | sed -E 's/[^a-zA-Z0-9_.-]+/-/g')
          echo "pr_tag=${sanitized_branch}-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: |
            # PR 构建使用特殊的 tag
            type=raw,value=${{ env.PR_TAG_PREFIX }}${{ steps.pr_meta.outputs.pr_tag }},enable=${{ github.event_name == 'pull_request' }}
            # 上游release触发构建
            type=raw,value=${{ needs.prepare.outputs.release_tag }},enable=${{ github.event_name == 'repository_dispatch' }}
            # 自己的release或手动构建
            type=semver,pattern={{version}},enable=${{ github.event_name == 'release' }}
            type=raw,value=${{ github.event.inputs.release_tag }},enable=${{ github.event_name == 'workflow_dispatch' }}
            type=raw,value=latest,enable=${{ github.event_name == 'release' }}

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_REGISTRY_USER }}
          password: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}

      - name: Get commit SHA
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Build and export
        id: build
        uses: docker/build-push-action@v5
        with:
          platforms: ${{ matrix.platform }}
          context: ./build-context
          file: ./build-context/Dockerfile
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            SHA=${{ steps.vars.outputs.sha_short }}
            UPSTREAM_VERSION=${{ needs.prepare.outputs.release_tag }}
            NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
            CLERK_SECRET_KEY=${{ secrets.CLERK_SECRET_KEY }}
            CLERK_WEBHOOK_SECRET=${{ secrets.CLERK_WEBHOOK_SECRET }}
          outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          rm -rf /tmp/digests
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: digest-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    name: Merge Images
    needs: [prepare, build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout base
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digest-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 为 merge job 添加 PR metadata 生成
      - name: Generate PR metadata
        if: github.event_name == 'pull_request'
        id: pr_meta
        run: |
          branch_name="${{ github.head_ref }}"
          sanitized_branch=$(echo "${branch_name}" | sed -E 's/[^a-zA-Z0-9_.-]+/-/g')
          echo "pr_tag=${sanitized_branch}-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: |
            # PR 构建使用特殊的 tag
            type=raw,value=${{ env.PR_TAG_PREFIX }}${{ steps.pr_meta.outputs.pr_tag }},enable=${{ github.event_name == 'pull_request' }}
            # 上游release触发构建
            type=raw,value=${{ needs.prepare.outputs.release_tag }},enable=${{ github.event_name == 'repository_dispatch' }}
            # 自己的release或手动构建
            type=semver,pattern={{version}},enable=${{ github.event_name == 'release' }}
            type=raw,value=${{ github.event.inputs.release_tag }},enable=${{ github.event_name == 'workflow_dispatch' }}
            type=raw,value=latest,enable=${{ github.event_name == 'release' }}

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_REGISTRY_USER }}
          password: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}
          
    #   - name: Send notification
    #     if: always()
    #     uses: rtCamp/action-slack-notify@v2
    #     env:
    #       SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
    #       SLACK_CHANNEL: ci-notifications
    #       SLACK_TITLE: Docker Build Result
    #       SLACK_MESSAGE: "Multi-architecture Docker image built for ${{ needs.prepare.outputs.release_tag }}"
    #       SLACK_COLOR: ${{ job.status }}