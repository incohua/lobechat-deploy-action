name: Build and Publish Docker Image

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: '构建的版本标签'
        required: true
        default: 'latest'
  repository_dispatch:
    types: [new-upstream-release]
  release:
    types: [published]
  pull_request:
    types: [synchronize, labeled, unlabeled]

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

env:
  REGISTRY_IMAGE: ${{ secrets.DOCKER_REGISTRY_USER }}/lobe-chat-clerk
  PR_TAG_PREFIX: pr-build-
  UPSTREAM_REPO: lobehub/lobe-chat  

jobs:
  prepare:
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'pull_request' &&
       contains(github.event.pull_request.labels.*.name, 'Build Docker')) ||
      github.event_name != 'pull_request'
    outputs:
      release_tag: ${{ steps.set_vars.outputs.release_tag }}
      build_context: ${{ steps.set_vars.outputs.build_context }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set variables
        id: set_vars
        run: |
          # 根据触发事件类型确定版本标签
          if [ "${{ github.event_name }}" == "repository_dispatch" ]; then
            # 从上游监控触发
            RELEASE_TAG="${{ github.event.client_payload.release_tag }}"
            BUILD_CONTEXT="upstream"
          elif [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            # 手动触发
            RELEASE_TAG="${{ github.event.inputs.release_tag }}"
            BUILD_CONTEXT="upstream"
          elif [ "${{ github.event_name }}" == "release" ]; then
            # 从release触发
            RELEASE_TAG="${{ github.ref_name }}"
            BUILD_CONTEXT="local"
          elif [ "${{ github.event_name }}" == "pull_request" ]; then
            # 从PR触发
            RELEASE_TAG="pr-${{ github.event.pull_request.number }}"
            BUILD_CONTEXT="local"
          else
            RELEASE_TAG="latest"
            BUILD_CONTEXT="local"
          fi
          
          echo "release_tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
          echo "build_context=$BUILD_CONTEXT" >> $GITHUB_OUTPUT
          echo "使用版本标签: $RELEASE_TAG"
          echo "构建上下文: $BUILD_CONTEXT"

  build:
    needs: prepare
    strategy:
      matrix:
        include:
          - platform: linux/amd64
            os: ubuntu-latest
          - platform: linux/arm64
            os: ubuntu-24.04-arm
    runs-on: ${{ matrix.os }}
    name: Build ${{ matrix.platform }} Image
    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Checkout base repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      # 如果是上游构建，下载上游仓库的release源码
      - name: Download upstream release source
        if: needs.prepare.outputs.build_context == 'upstream'
        run: |
          mkdir -p upstream-temp
          cd upstream-temp
          
          RELEASE_TAG="${{ needs.prepare.outputs.release_tag }}"
          REPO_PARTS=(${UPSTREAM_REPO//\// })
          OWNER=${REPO_PARTS[0]}
          REPO=${REPO_PARTS[1]}
          
          echo "下载 $OWNER/$REPO 的源码，版本: $RELEASE_TAG"
          
          # 下载源代码压缩包
          curl -L "https://github.com/$OWNER/$REPO/archive/refs/tags/$RELEASE_TAG.tar.gz" -o source.tar.gz
          
          # 解压源代码
          tar -xzf source.tar.gz --strip-components=1
          rm source.tar.gz
          
          echo "上游代码下载完成，版本: $RELEASE_TAG"
          ls -la
      
      # 准备构建上下文
      - name: Prepare build context
        run: |
          mkdir -p build-context
          
          if [ "${{ needs.prepare.outputs.build_context }}" == "upstream" ]; then
            echo "基于上游仓库构建"
            # 复制上游仓库内容
            cp -r upstream-temp/* build-context/
            
           # 应用自定义修改
           echo "应用自定义修改..."
           
           # 检查并替换 Dockerfile.database
           if [ -f "custom/Dockerfile.database" ]; then
             echo "替换 Dockerfile.database"
             cp custom/Dockerfile.database build-context/
           fi
           
           # 应用其他自定义文件
           if [ -d "custom" ]; then
             echo "应用其他自定义文件"
             find custom -type f -not -name "Dockerfile.database" | while read file; do
               target_file=${file#custom/}
               target_dir=$(dirname "build-context/$target_file")
               mkdir -p "$target_dir"
               cp "$file" "build-context/$target_file"
               echo "应用: $target_file"
             done
           fi
          else
            echo "基于本地仓库构建"
            # 直接使用本地仓库的内容
            cp -r ./* build-context/
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 为 PR 生成特殊的 tag
      - name: Generate PR metadata
        if: github.event_name == 'pull_request'
        id: pr_meta
        run: |
          branch_name="${{ github.head_ref }}"
          sanitized_branch=$(echo "${branch_name}" | sed -E 's/[^a-zA-Z0-9_.-]+/-/g')
          echo "pr_tag=${sanitized_branch}-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: |
            # PR 构建使用特殊的 tag
            type=raw,value=${{ env.PR_TAG_PREFIX }}${{ steps.pr_meta.outputs.pr_tag }},enable=${{ github.event_name == 'pull_request' }}
            # 上游release触发构建
            type=raw,value=${{ needs.prepare.outputs.release_tag }},enable=${{ github.event_name == 'repository_dispatch' }}
            # 自己的release或手动构建
            type=semver,pattern={{version}},enable=${{ github.event_name == 'release' }}
            type=raw,value=${{ github.event.inputs.release_tag }},enable=${{ github.event_name == 'workflow_dispatch' }}
            type=raw,value=latest,enable=${{ github.event_name == 'release' }}

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_REGISTRY_USER }}
          password: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}

      - name: Get commit SHA
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Build and export
        id: build
        uses: docker/build-push-action@v5
        with:
          platforms: ${{ matrix.platform }}
          context: ./build-context
          file: ./build-context/Dockerfile.database
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            SHA=${{ steps.vars.outputs.sha_short }}
            UPSTREAM_VERSION=${{ needs.prepare.outputs.release_tag }}
            NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
            CLERK_SECRET_KEY=${{ secrets.CLERK_SECRET_KEY }}
            CLERK_WEBHOOK_SECRET=${{ secrets.CLERK_WEBHOOK_SECRET }}
          outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          rm -rf /tmp/digests
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: digest-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1
